(load "../system.scm")

;;(define X   (make-connector))
;;(define Y   (make-connector))
;;(define ANG (make-connector))
;;(probe "x"   X)
;;(probe "y"   Y)
;;(probe "ang" ANG)
;;(cord-to-ang X Y ANG)
;;(set-value! X 2 'user)
;;(set-value! Y 2 'user)
;;(forget-value! Y 'user)
;;(set-value! ANG 0.785 'user)
(define (cord-to-ang x y ang)
  (let ((u (make-connector))
        (v (make-connector)))
    (divider x y u)
    (tangent ang v)
    (equal u v)
    'ok))

;;(define X   (make-connector))
;;(define Y   (make-connector))
;;(define ANG (make-connector))
;;(probe "x"   X)
;;(probe "y"   Y)
;;(probe "ang" ANG)
;;(cord-to-ang X Y ANG)
;;(set-value! X 2 'user)
;;(set-value! Y 2 'user)
;;(forget-value! Y 'user)
;;(set-value! ANG 0.785 'user)
(define (cav x y ang)
  (=v (/v x y) (tanv ang))
  'ok)

;;RELP:
;;(cord-ang 'x 'set 2)
;;(cord-ang 'y 'set-value! 2)
;;(cord-ang 'x 'forget)
;;(cord-ang 'ang 'set 0.76)
;;(cord-ang 'ang 'print)
;;(cord-ang '(x y) 'print)
(define cord-ang
  (define c-p '((x "x") (y "y") (ang "ang"))
    (lambda(a b c) (=v (/v a b) (tanv c))) )) 
