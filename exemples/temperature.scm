(load "../syntax.scm")

;;syntax original
;;REPL:
;;(define C (make-connector))
;;(define F (make-connector))
;;(probe "celsius temp" C)
;;(probe "fahrenheit temp" F)
;;(celsuis-fahrenheit-converter C F)
;;(set-value! C 30 'user)
;;(forget-value! C 'user)
;;(set-value! F 80 'user)
;;(forget-value! F 'user)
(define (celsius-fahrenheit-converter c f)
  (let ((u (make-connector))
        (v (make-connector))
        (w (make-connector))
        (x (make-connector))
        (y (make-connector)))
    (multiplier c w u)
    (multiplier v x u)
    (adder v y f)
    (constant 9 w)
    (constant 5 x)
    (constant 32 y)
    'ok))

;;syntax original
;;REPL:
;;(define C (make-connector))
;;(define F (make-connector))
;;(probe "celsius temp" C)
;;(probe "fahrenheit temp" F)
;;(c-to-f C F)
;;(set-value! C 30 'user)
;;(forget-value! C 'user)
;;(set-value! F 80 'user)
;;(forget-value! F 'user)
(define (c-to-f c f)
  (let ((u (make-connector))
        (v (make-connector))
        (w (make-connector))
        (x (make-connector))
        (y (make-connector)))
    (subtractor f y v)
    (multiplier v x u)
    (multiplier c w u)
    (constant 9  w)
    (constant 5  x)
    (constant 32 y)
    'ok))

;;syntax modificada
;;(define C (make-connector))
;;(define F (make-connector))
;;(probe "celsius temp" C)
;;(probe "fahrenheit temp" F)
;;(c-to-f C F)
;;(set-value! C 30 'user)
;;(forget-value! C 'user)
;;(set-value! F 80 'user)
;;(forget-value! F 'user)
(define (cfv c f)
  (=v (*v (cv 9) c)
      (*v (cv 5) (-v f (cv 32))))
  'ok)
